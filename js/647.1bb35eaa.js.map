{"version":3,"file":"js/647.1bb35eaa.js","mappings":"g9DAEIA,G,0CADFC,EAAAA,EAAAA,IAoDM,WAAAC,E,CAGR,OACEC,IAAAA,GACE,MAAO,CAAC,CACV,EAEAC,MAAO,GAEPC,QAAS,CAAC,EACVC,OAAAA,GAAW,EACXC,OAAAA,GAAW,G,UC1Db,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAEzF,O","sources":["webpack://web-shop/./src/views/seller/SellerDataView.vue","webpack://web-shop/./src/views/seller/SellerDataView.vue?1224"],"sourcesContent":["<template>\r\n  <div>\r\n    <button\r\n      class=\"accordion-button\"\r\n      type=\"button\"\r\n      data-bs-toggle=\"collapse\"\r\n      data-bs-target=\"#collapseOne\"\r\n      aria-expanded=\"true\"\r\n      aria-controls=\"collapseOne\"\r\n    >\r\n      Accordion Item #1\r\n    </button>\r\n    <div\r\n      id=\"collapseOne\"\r\n      class=\"accordion-collapse collapse show\"\r\n      data-bs-parent=\"#accordionExample\"\r\n    >\r\n      <div class=\"accordion-body\">\r\n        <strong>This is the first item's accordion body.</strong> It is shown by\r\n        default, until the collapse plugin adds the appropriate classes that we\r\n        use to style each element. These classes control the overall appearance,\r\n        as well as the showing and hiding via CSS transitions. You can modify\r\n        any of this with custom CSS or overriding our default variables. It's\r\n        also worth noting that just about any HTML can go within the\r\n        <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n    <button\r\n      class=\"accordion-button collapsed\"\r\n      type=\"button\"\r\n      data-bs-toggle=\"collapse\"\r\n      data-bs-target=\"#collapseTwo\"\r\n      aria-expanded=\"false\"\r\n      aria-controls=\"collapseTwo\"\r\n    >\r\n      Accordion Item #2\r\n    </button>\r\n    <div\r\n      id=\"collapseTwo\"\r\n      class=\"accordion-collapse collapse\"\r\n      data-bs-parent=\"#accordionExample\"\r\n    >\r\n      <div class=\"accordion-body\">\r\n        <strong>This is the second item's accordion body.</strong> It is hidden\r\n        by default, until the collapse plugin adds the appropriate classes that\r\n        we use to style each element. These classes control the overall\r\n        appearance, as well as the showing and hiding via CSS transitions. You\r\n        can modify any of this with custom CSS or overriding our default\r\n        variables. It's also worth noting that just about any HTML can go within\r\n        the <code>.accordion-body</code>, though the transition does limit\r\n        overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {};\r\n  },\r\n\r\n  props: [],\r\n\r\n  methods: {},\r\n  created() {},\r\n  mounted() {},\r\n\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@media (max-width: 739px) {\r\n}\r\n</style>\r\n","import { render } from \"./SellerDataView.vue?vue&type=template&id=f529e41c&scoped=true\"\nimport script from \"./SellerDataView.vue?vue&type=script&lang=js\"\nexport * from \"./SellerDataView.vue?vue&type=script&lang=js\"\n\nimport \"./SellerDataView.vue?vue&type=style&index=0&id=f529e41c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-f529e41c\"]])\n\nexport default __exports__"],"names":["_hoisted_1","_createElementBlock","_hoisted_5","data","props","methods","created","mounted","__exports__","render"],"sourceRoot":""}